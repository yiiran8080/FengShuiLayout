{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/i18n/routing.ts"],"sourcesContent":["import { defineRouting } from \"next-intl/routing\";\r\n\r\nexport const routing = defineRouting({\r\n  // A list of all locales that are supported\r\n  locales: [\"zh-CN\", \"zh-TW\"],\r\n\r\n  // Used when no locale matches\r\n  defaultLocale: \"zh-CN\",\r\n});\r\n"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,UAAU,CAAA,GAAA,ybAAA,CAAA,gBAAa,AAAD,EAAE;IACnC,2CAA2C;IAC3C,SAAS;QAAC;QAAS;KAAQ;IAE3B,8BAA8B;IAC9B,eAAe;AACjB"}},
    {"offset": {"line": 43, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/src/middleware.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport createMiddleware from 'next-intl/middleware';\r\nimport { getToken } from 'next-auth/jwt';\r\nimport { routing } from './i18n/routing';\r\n// Create the internationalization middleware\r\nconst intlMiddleware = createMiddleware(routing);\r\n\r\nexport default async function middleware(request) {\r\n    const { pathname } = request.nextUrl;\r\n\r\n    // Skip auth check for public routes\r\n    const isPublicRoute =\r\n        pathname === '/' ||\r\n        pathname.startsWith('/auth') ||\r\n        pathname.startsWith('/api') ||\r\n        pathname.startsWith('/_next') ||\r\n        pathname.startsWith('/static') ||\r\n        pathname.includes('.') ||\r\n        pathname.includes('/auth/login') ||\r\n        pathname === '/favicon.ico';\r\n\r\n    // Handle internationalization first\r\n    const response = intlMiddleware(request);\r\n\r\n    // If it's a public route, no need to check authentication\r\n    if (isPublicRoute) {\r\n        return response;\r\n    }\r\n\r\n    // Check if the user is authenticated\r\n    const token = await getToken({ req: request, secret: process.env.NEXTAUTH_SECRET });\r\n    //console.log(\"token\", token);\r\n    // If not authenticated, redirect to login page\r\n    if (!token) {\r\n\r\n        //console.log('pathname', request.nextUrl.pathname);\r\n        const referer = request.headers.get('referer') || '';\r\n        //console.log('request.url', request.nextUrl, referer);\r\n        // // 检查来源是否已经是登录页，避免循环重定向\r\n        if (referer.includes('/auth/login')) {\r\n            return response;\r\n        }\r\n        //允许目标页面是首页、隐私条款等页面\r\n        if (!request.nextUrl.pathname.includes('/design') && !request.nextUrl.pathname.includes('/report')) {\r\n            return response;\r\n        }\r\n\r\n        const locale = referer.indexOf('zh-CN') >= 0 ? 'zh-CN' : 'zh-TW';\r\n        return NextResponse.redirect(new URL(`/${locale}/auth/login?callbackUrl=${request.nextUrl.pathname}`, request.url));\r\n    }\r\n\r\n    return response;\r\n}\r\n\r\nexport const config = {\r\n    // 匹配所有路径\r\n    matcher: ['/((?!api|_next|.*\\\\..*).*)', '/'],\r\n}; "],"names":[],"mappings":";;;;AAAA;AAAA;AACA;AACA;AAAA;AACA;;;;;AACA,6CAA6C;AAC7C,MAAM,iBAAiB,CAAA,GAAA,6YAAA,CAAA,UAAgB,AAAD,EAAE,8HAAA,CAAA,UAAO;AAEhC,eAAe,WAAW,OAAO;IAC5C,MAAM,EAAE,QAAQ,EAAE,GAAG,QAAQ,OAAO;IAEpC,oCAAoC;IACpC,MAAM,gBACF,aAAa,OACb,SAAS,UAAU,CAAC,YACpB,SAAS,UAAU,CAAC,WACpB,SAAS,UAAU,CAAC,aACpB,SAAS,UAAU,CAAC,cACpB,SAAS,QAAQ,CAAC,QAClB,SAAS,QAAQ,CAAC,kBAClB,aAAa;IAEjB,oCAAoC;IACpC,MAAM,WAAW,eAAe;IAEhC,0DAA0D;IAC1D,IAAI,eAAe;QACf,OAAO;IACX;IAEA,qCAAqC;IACrC,MAAM,QAAQ,MAAM,CAAA,GAAA,yMAAA,CAAA,WAAQ,AAAD,EAAE;QAAE,KAAK;QAAS,QAAQ,QAAQ,GAAG,CAAC,eAAe;IAAC;IACjF,8BAA8B;IAC9B,+CAA+C;IAC/C,IAAI,CAAC,OAAO;QAER,oDAAoD;QACpD,MAAM,UAAU,QAAQ,OAAO,CAAC,GAAG,CAAC,cAAc;QAClD,uDAAuD;QACvD,0BAA0B;QAC1B,IAAI,QAAQ,QAAQ,CAAC,gBAAgB;YACjC,OAAO;QACX;QACA,mBAAmB;QACnB,IAAI,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,QAAQ,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,YAAY;YAChG,OAAO;QACX;QAEA,MAAM,SAAS,QAAQ,OAAO,CAAC,YAAY,IAAI,UAAU;QACzD,OAAO,4TAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,CAAC,EAAE,OAAO,wBAAwB,EAAE,QAAQ,OAAO,CAAC,QAAQ,EAAE,EAAE,QAAQ,GAAG;IACrH;IAEA,OAAO;AACX;AAEO,MAAM,SAAS;IAClB,SAAS;IACT,SAAS;QAAC;QAA8B;KAAI;AAChD"}}]
}