{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/lib/mongoose.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\n// 使用本地MongoDB服务\r\nconst MONGODB_URI = process.env.MONGODB_URI;\r\n\r\nif (!MONGODB_URI) {\r\n    throw new Error(\r\n        'Please define the MONGODB_URI environment variable inside .env'\r\n    );\r\n}\r\n\r\n/**\r\n * Global is used here to maintain a cached connection across hot reloads\r\n * in development. This prevents connections growing exponentially\r\n * during API Route usage.\r\n */\r\nlet cached = global.mongoose;\r\n\r\nif (!cached) {\r\n    cached = global.mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function dbConnect() {\r\n    if (cached.conn) {\r\n        return cached.conn;\r\n    }\r\n\r\n    if (!cached.promise) {\r\n        const opts = {\r\n            // bufferCommands: false,\r\n            serverSelectionTimeoutMS: 30000,\r\n            socketTimeoutMS: 30000\r\n        };\r\n\r\n        cached.promise = mongoose.connect(MONGODB_URI, opts)\r\n            .then((mongoose) => {\r\n                console.log('MongoDB connected successfully');\r\n                return mongoose;\r\n            })\r\n            .catch((e) => {\r\n                console.error('MongoDB connection error:', e);\r\n                throw e;\r\n            });\r\n    }\r\n\r\n    try {\r\n        cached.conn = await cached.promise;\r\n    } catch (e) {\r\n        console.error(\"MongoDB connection failed:\", e);\r\n        cached.promise = null;\r\n        throw e;\r\n    }\r\n\r\n    return cached.conn;\r\n}\r\n\r\nexport default dbConnect; "],"names":[],"mappings":";;;AAAA;;AAEA,gBAAgB;AAChB,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IACd,MAAM,IAAI,MACN;AAER;AAEA;;;;CAIC,GACD,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACT,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC3D;AAEA,eAAe;IACX,IAAI,OAAO,IAAI,EAAE;QACb,OAAO,OAAO,IAAI;IACtB;IAEA,IAAI,CAAC,OAAO,OAAO,EAAE;QACjB,MAAM,OAAO;YACT,yBAAyB;YACzB,0BAA0B;YAC1B,iBAAiB;QACrB;QAEA,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,MAC1C,IAAI,CAAC,CAAC;YACH,QAAQ,GAAG,CAAC;YACZ,OAAO;QACX,GACC,KAAK,CAAC,CAAC;YACJ,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,MAAM;QACV;IACR;IAEA,IAAI;QACA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACtC,EAAE,OAAO,GAAG;QACR,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,OAAO,OAAO,GAAG;QACjB,MAAM;IACV;IAEA,OAAO,OAAO,IAAI;AACtB;uCAEe","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/models/User.js"],"sourcesContent":["import mongoose from 'mongoose';\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n    },\r\n    gender: {\r\n        type: String,\r\n        enum: ['female', 'male'],\r\n        required: true,\r\n        default: 'female'\r\n    },\r\n    birthDateTime: {\r\n        type: Date,\r\n        required: true,\r\n        default: new Date(1996, 2, 12, 22)\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: false,\r\n    },\r\n    // provider: {\r\n    //     type: String,\r\n    //     enum: ['google', 'apple'],\r\n    //     required: true,\r\n    // },\r\n    createdAt: {\r\n        type: Date,\r\n        default: Date.now,\r\n    },\r\n    updatedAt: {\r\n        type: Date,\r\n        default: Date.now,\r\n    },\r\n});\r\n\r\n// Modify Project references\r\nUserSchema.virtual('projects', {\r\n    ref: 'Project',\r\n    localField: 'userId',\r\n    foreignField: 'owner',\r\n});\r\n\r\n// Set options to allow virtual properties to be included in JSON\r\nUserSchema.set('toJSON', { virtuals: true });\r\nUserSchema.set('toObject', { virtuals: true });\r\n\r\nexport default mongoose.models.User || mongoose.model('User', UserSchema); "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,aAAa,IAAI,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IACnC,QAAQ;QACJ,MAAM;QACN,UAAU;QACV,QAAQ;IACZ;IACA,QAAQ;QACJ,MAAM;QACN,MAAM;YAAC;YAAU;SAAO;QACxB,UAAU;QACV,SAAS;IACb;IACA,eAAe;QACX,MAAM;QACN,UAAU;QACV,SAAS,IAAI,KAAK,MAAM,GAAG,IAAI;IACnC;IACA,OAAO;QACH,MAAM;QACN,UAAU;IACd;IACA,cAAc;IACd,oBAAoB;IACpB,iCAAiC;IACjC,sBAAsB;IACtB,KAAK;IACL,WAAW;QACP,MAAM;QACN,SAAS,KAAK,GAAG;IACrB;IACA,WAAW;QACP,MAAM;QACN,SAAS,KAAK,GAAG;IACrB;AACJ;AAEA,4BAA4B;AAC5B,WAAW,OAAO,CAAC,YAAY;IAC3B,KAAK;IACL,YAAY;IACZ,cAAc;AAClB;AAEA,iEAAiE;AACjE,WAAW,GAAG,CAAC,UAAU;IAAE,UAAU;AAAK;AAC1C,WAAW,GAAG,CAAC,YAAY;IAAE,UAAU;AAAK;uCAE7B,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ","debugId":null}},
    {"offset": {"line": 380, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/auth.ts"],"sourcesContent":["import NextAuth, { customFetch } from \"next-auth\";\r\n// import { authConfig } from \"./auth.config\";\r\nimport type { NextAuthConfig } from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport AppleProvider from \"next-auth/providers/apple\";\r\nimport GithubProvider from \"next-auth/providers/github\";\r\nimport dbConnect from \"@/lib/mongoose\";\r\nimport User from \"@/models/User\";\r\nimport { ProxyAgent, fetch as undici } from \"undici\";\r\nconst dispatcher = new ProxyAgent({\r\n  uri: process.env.NEXTAUTH_URL_INTERNAL as string,\r\n});\r\nfunction proxy(...args: Parameters<typeof fetch>): ReturnType<typeof fetch> {\r\n  return undici(args[0], { ...(args[1] ?? {}), dispatcher });\r\n}\r\nexport const { handlers, signIn, signOut, auth } = NextAuth(\r\n  {\r\n    trustHost: true,\r\n\r\n    providers: [\r\n      GithubProvider,\r\n      GoogleProvider({\r\n        clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n\r\n        //redirectProxyUrl: process.env.NEXTAUTH_URL_INTERNAL as string,\r\n        [customFetch]: proxy,\r\n      }),\r\n      AppleProvider({\r\n        clientId: process.env.APPLE_ID as string,\r\n        clientSecret: process.env.APPLE_SECRET as string,\r\n      }),\r\n    ],\r\n    secret: process.env.NEXTAUTH_SECRET as string,\r\n    // debug: true,\r\n    callbacks: {\r\n      async jwt({ token, user, account }) {\r\n        if (account && user) {\r\n          token.accessToken = account.access_token;\r\n          token.id = user.id;\r\n        }\r\n        return token;\r\n      },\r\n\r\n      // async signIn({ user, account }) {\r\n      //   //console.log(\"OAuth请求目标URL:\", user, account);\r\n      //   return true;\r\n      //   // await dbConnect();\r\n\r\n      //   // // Extract user info from provider data\r\n      //   // const { id, email, name } = user;\r\n      //   // // const provider = account?.provider;\r\n\r\n      //   // // Check if user exists\r\n      //   // let existingUser = await User.findOne({ userId: id });\r\n\r\n      //   // if (!existingUser) {\r\n      //   //     // For new users, prompt them to fill additional info on first login\r\n      //   //     // Store minimal info and redirect to complete profile\r\n      //   //     return `/auth/complete-profile?id=${id}&email=${email}&provider=${provider}`;\r\n      //   // }\r\n      // },\r\n      async session({ session, token }) {\r\n        if (token && session.user) {\r\n          // 扩展 session.user 类型以包含 id 属性\r\n          (session.user as any) = {\r\n            ...session.user,\r\n            id: token.sub,\r\n            userId: session.user.email, //用谷歌邮箱做用户唯一id\r\n          };\r\n        }\r\n        //console.log(\"session\", session);\r\n        return session;\r\n      },\r\n    },\r\n    pages: {\r\n      // error: \"/error\",\r\n      // signIn: '/auth/login',\r\n    },\r\n  } satisfies NextAuthConfig\r\n  //   (req) => {\r\n  //     //   if (req) {\r\n  //     //   console.log(req) // do something with the request\r\n  //     //    }\r\n  //     return { ...authConfig };\r\n  //   }\r\n);\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;;;;;;AACA,MAAM,aAAa,IAAI,qLAAA,CAAA,aAAU,CAAC;IAChC,KAAK,QAAQ,GAAG,CAAC,qBAAqB;AACxC;AACA,SAAS,MAAM,GAAG,IAA8B;IAC9C,OAAO,CAAA,GAAA,qLAAA,CAAA,QAAM,AAAD,EAAE,IAAI,CAAC,EAAE,EAAE;QAAE,GAAI,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QAAG;IAAW;AAC1D;AACO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,0VAAA,CAAA,UAAQ,AAAD,EACxD;IACE,WAAW;IAEX,WAAW;QACT,mNAAA,CAAA,UAAc;QACd,CAAA,GAAA,mNAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAE9C,gEAAgE;YAChE,CAAC,8MAAA,CAAA,cAAW,CAAC,EAAE;QACjB;QACA,CAAA,GAAA,kNAAA,CAAA,UAAa,AAAD,EAAE;YACZ,UAAU,QAAQ,GAAG,CAAC,QAAQ;YAC9B,cAAc,QAAQ,GAAG,CAAC,YAAY;QACxC;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,eAAe;IACf,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,WAAW,MAAM;gBACnB,MAAM,WAAW,GAAG,QAAQ,YAAY;gBACxC,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QAEA,oCAAoC;QACpC,mDAAmD;QACnD,iBAAiB;QACjB,0BAA0B;QAE1B,+CAA+C;QAC/C,yCAAyC;QACzC,8CAA8C;QAE9C,+BAA+B;QAC/B,8DAA8D;QAE9D,4BAA4B;QAC5B,gFAAgF;QAChF,kEAAkE;QAClE,yFAAyF;QACzF,SAAS;QACT,KAAK;QACL,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,8BAA8B;gBAC7B,QAAQ,IAAI,GAAW;oBACtB,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,GAAG;oBACb,QAAQ,QAAQ,IAAI,CAAC,KAAK;gBAC5B;YACF;YACA,kCAAkC;YAClC,OAAO;QACT;IACF;IACA,OAAO;IAGP;AACF","debugId":null}},
    {"offset": {"line": 472, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/lib/session.ts"],"sourcesContent":["import \"server-only\"; // 标记只在服务端使用（客户端组件引入会报错）\r\nimport { auth } from \"@/auth\";\r\nimport { cache } from \"react\";\r\n\r\nasync function getUserInfoFn() {\r\n  const session = await auth();\r\n\r\n  if (!session?.user) {\r\n    return null;\r\n  }\r\n\r\n  return session.user; // 格式如 { id, name, email, image }\r\n}\r\n\r\nexport const getUserInfo = cache(getUserInfoFn);\r\n"],"names":[],"mappings":";;;AAAA,0eAAsB,wBAAwB;AAC9C;AACA;;;;AAEA,eAAe;IACb,MAAM,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,OAAI,AAAD;IAEzB,IAAI,CAAC,SAAS,MAAM;QAClB,OAAO;IACT;IAEA,OAAO,QAAQ,IAAI,EAAE,iCAAiC;AACxD;AAEO,MAAM,cAAc,CAAA,GAAA,sUAAA,CAAA,QAAK,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/app/api/utils/gen-res-data.ts"],"sourcesContent":["export function genUnAuthData(msg?: string) {\r\n  return { status: 401, message: msg || \"Unauthorized\" };\r\n}\r\n\r\nexport function genSuccessData(data?: any) {\r\n  const res: any = { status: 0 };\r\n  if (data) res.data = data;\r\n  return res;\r\n}\r\n\r\nexport function genErrorData(msg?: string) {\r\n  return { status: -1, message: msg || \"server error\" };\r\n}\r\n"],"names":[],"mappings":";;;;;AAAO,SAAS,cAAc,GAAY;IACxC,OAAO;QAAE,QAAQ;QAAK,SAAS,OAAO;IAAe;AACvD;AAEO,SAAS,eAAe,IAAU;IACvC,MAAM,MAAW;QAAE,QAAQ;IAAE;IAC7B,IAAI,MAAM,IAAI,IAAI,GAAG;IACrB,OAAO;AACT;AAEO,SAAS,aAAa,GAAY;IACvC,OAAO;QAAE,QAAQ,CAAC;QAAG,SAAS,OAAO;IAAe;AACtD","debugId":null}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/app/api/users/%5BuserId%5D/route.js"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport dbConnect from '@/lib/mongoose';\r\nimport User from '@/models/User';\r\nimport { getUserInfo } from \"@/lib/session\";\r\n// import { getServerSession } from 'next-auth/next';\r\n// import { authOptions } from '../../auth/[...nextauth]/route';\r\nimport { genSuccessData, genUnAuthData, genErrorData } from \"../../utils/gen-res-data\";\r\n\r\n\r\n// Get user by ID\r\n//用谷歌邮箱做用户唯一id\r\nexport async function GET(request, { params }) {\r\n    const { userId } = await params;\r\n    try {\r\n        await dbConnect();\r\n        const user = await User.findOne({ userId }).select('-__v');\r\n\r\n        // if (!user) {\r\n        //     return NextResponse.json(\r\n        //         { message: 'User not found' },\r\n        //         { status: 404 }\r\n        //     );\r\n        // }\r\n\r\n        return NextResponse.json(genSuccessData(user || {}));\r\n    } catch (error) {\r\n        console.error('Error fetching user:', error);\r\n        return NextResponse.json(\r\n            genErrorData('Failed to fetch user'),\r\n        );\r\n    }\r\n}\r\n\r\n// Update user by ID TODO\r\nexport async function POST(request, { params }) {\r\n    try {\r\n        //const userInfo = { userId: \"yunyanyr@gmail.com\" };\r\n        const userInfo = await getUserInfo();\r\n        if (userInfo == null) return Response.json(genUnAuthData());\r\n\r\n        const { userId } = await params;\r\n        const data = await request.json();\r\n        //console.log(data, userId);\r\n        // Authenticate the request (in real app, ensure only the user or admin can update)\r\n        // const session = await getServerSession(authOptions);\r\n        // if (!session || (session.user.id !== userId && !session.user.isAdmin)) {\r\n        //   return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\r\n        // }\r\n\r\n        await dbConnect();\r\n\r\n        // Find the user\r\n        const user = await User.findOne({ userId });\r\n        if (!user) {\r\n            await User.create({\r\n                userId,\r\n                ...data\r\n            });\r\n        } else {\r\n            user.gender = data.gender;\r\n            user.birthDateTime = new Date(data.birthDateTime);\r\n            await user.save();\r\n        }\r\n\r\n        return NextResponse.json(genSuccessData())\r\n    } catch (error) {\r\n        console.error('Error updating user:', error);\r\n        return NextResponse.json(genErrorData('Failed to update user'))\r\n    }\r\n}\r\n\r\n// Delete user by ID\r\nexport async function DELETE(request, { params }) {\r\n    try {\r\n        const { userId } = params;\r\n\r\n        // Authenticate the request (in real app, ensure only the user or admin can delete)\r\n        // const session = await getServerSession(authOptions);\r\n        // if (!session || (session.user.id !== userId && !session.user.isAdmin)) {\r\n        //   return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\r\n        // }\r\n\r\n        await dbConnect();\r\n\r\n        // Delete the user\r\n        const result = await User.deleteOne({ userId });\r\n\r\n        if (result.deletedCount === 0) {\r\n            return NextResponse.json(\r\n                { message: 'User not found' },\r\n                { status: 404 }\r\n            );\r\n        }\r\n\r\n        return NextResponse.json({\r\n            message: 'User deleted successfully'\r\n        });\r\n    } catch (error) {\r\n        console.error('Error deleting user:', error);\r\n        return NextResponse.json(\r\n            { message: 'Failed to delete user', error: error.message },\r\n            { status: 500 }\r\n        );\r\n    }\r\n} "],"names":[],"mappings":"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","debugId":null}}]
}