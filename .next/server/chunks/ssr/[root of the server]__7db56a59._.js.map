{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 193, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/auth.ts"],"sourcesContent":["import NextAuth, { customFetch } from \"next-auth\";\r\n// import { authConfig } from \"./auth.config\";\r\nimport type { NextAuthConfig } from \"next-auth\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport AppleProvider from \"next-auth/providers/apple\";\r\nimport GithubProvider from \"next-auth/providers/github\";\r\nimport dbConnect from \"@/lib/mongoose\";\r\nimport User from \"@/models/User\";\r\nimport { ProxyAgent, fetch as undici } from \"undici\";\r\nconst dispatcher = new ProxyAgent({\r\n  uri: process.env.NEXTAUTH_URL_INTERNAL as string,\r\n});\r\nfunction proxy(...args: Parameters<typeof fetch>): ReturnType<typeof fetch> {\r\n  return undici(args[0], { ...(args[1] ?? {}), dispatcher });\r\n}\r\nexport const { handlers, signIn, signOut, auth } = NextAuth(\r\n  {\r\n    trustHost: true,\r\n\r\n    providers: [\r\n      GithubProvider,\r\n      GoogleProvider({\r\n        clientId: process.env.GOOGLE_CLIENT_ID as string,\r\n        clientSecret: process.env.GOOGLE_CLIENT_SECRET as string,\r\n\r\n        //redirectProxyUrl: process.env.NEXTAUTH_URL_INTERNAL as string,\r\n        [customFetch]: proxy,\r\n      }),\r\n      AppleProvider({\r\n        clientId: process.env.APPLE_ID as string,\r\n        clientSecret: process.env.APPLE_SECRET as string,\r\n      }),\r\n    ],\r\n    secret: process.env.NEXTAUTH_SECRET as string,\r\n    // debug: true,\r\n    callbacks: {\r\n      async jwt({ token, user, account }) {\r\n        if (account && user) {\r\n          token.accessToken = account.access_token;\r\n          token.id = user.id;\r\n        }\r\n        return token;\r\n      },\r\n\r\n      // async signIn({ user, account }) {\r\n      //   //console.log(\"OAuth请求目标URL:\", user, account);\r\n      //   return true;\r\n      //   // await dbConnect();\r\n\r\n      //   // // Extract user info from provider data\r\n      //   // const { id, email, name } = user;\r\n      //   // // const provider = account?.provider;\r\n\r\n      //   // // Check if user exists\r\n      //   // let existingUser = await User.findOne({ userId: id });\r\n\r\n      //   // if (!existingUser) {\r\n      //   //     // For new users, prompt them to fill additional info on first login\r\n      //   //     // Store minimal info and redirect to complete profile\r\n      //   //     return `/auth/complete-profile?id=${id}&email=${email}&provider=${provider}`;\r\n      //   // }\r\n      // },\r\n      async session({ session, token }) {\r\n        if (token && session.user) {\r\n          // 扩展 session.user 类型以包含 id 属性\r\n          (session.user as any) = {\r\n            ...session.user,\r\n            id: token.sub,\r\n            userId: session.user.email, //用谷歌邮箱做用户唯一id\r\n          };\r\n        }\r\n        //console.log(\"session\", session);\r\n        return session;\r\n      },\r\n    },\r\n    pages: {\r\n      // error: \"/error\",\r\n      // signIn: '/auth/login',\r\n    },\r\n  } satisfies NextAuthConfig\r\n  //   (req) => {\r\n  //     //   if (req) {\r\n  //     //   console.log(req) // do something with the request\r\n  //     //    }\r\n  //     return { ...authConfig };\r\n  //   }\r\n);\r\n"],"names":[],"mappings":";;;;;;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;;;;;;AACA,MAAM,aAAa,IAAI,mLAAA,CAAA,aAAU,CAAC;IAChC,KAAK,QAAQ,GAAG,CAAC,qBAAqB;AACxC;AACA,SAAS,MAAM,GAAG,IAA8B;IAC9C,OAAO,CAAA,GAAA,mLAAA,CAAA,QAAM,AAAD,EAAE,IAAI,CAAC,EAAE,EAAE;QAAE,GAAI,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QAAG;IAAW;AAC1D;AACO,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,CAAA,GAAA,wVAAA,CAAA,UAAQ,AAAD,EACxD;IACE,WAAW;IAEX,WAAW;QACT,iNAAA,CAAA,UAAc;QACd,CAAA,GAAA,iNAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;YAE9C,gEAAgE;YAChE,CAAC,4MAAA,CAAA,cAAW,CAAC,EAAE;QACjB;QACA,CAAA,GAAA,gNAAA,CAAA,UAAa,AAAD,EAAE;YACZ,UAAU,QAAQ,GAAG,CAAC,QAAQ;YAC9B,cAAc,QAAQ,GAAG,CAAC,YAAY;QACxC;KACD;IACD,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,eAAe;IACf,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,WAAW,MAAM;gBACnB,MAAM,WAAW,GAAG,QAAQ,YAAY;gBACxC,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QAEA,oCAAoC;QACpC,mDAAmD;QACnD,iBAAiB;QACjB,0BAA0B;QAE1B,+CAA+C;QAC/C,yCAAyC;QACzC,8CAA8C;QAE9C,+BAA+B;QAC/B,8DAA8D;QAE9D,4BAA4B;QAC5B,gFAAgF;QAChF,kEAAkE;QAClE,yFAAyF;QACzF,SAAS;QACT,KAAK;QACL,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACzB,8BAA8B;gBAC7B,QAAQ,IAAI,GAAW;oBACtB,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,GAAG;oBACb,QAAQ,QAAQ,IAAI,CAAC,KAAK;gBAC5B;YACF;YACA,kCAAkC;YAClC,OAAO;QACT;IACF;IACA,OAAO;IAGP;AACF","debugId":null}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/app/actions.ts"],"sourcesContent":["\"use server\";\r\nimport { signOut } from \"@/auth\";\r\nexport const handleSignOut = async () => {\r\n  await signOut({ redirectTo: \"/auth/login\" });\r\n};\r\n"],"names":[],"mappings":";;;;;AACA;;;;;AACO,MAAM,uCAAW,GAAX,gBAAgB;IAC3B,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAO,AAAD,EAAE;QAAE,YAAY;IAAc;AAC5C;;;IAFa;;AAAA,8WAAA","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 368, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/app/%5Blocale%5D/auth/login/page.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/[locale]/auth/login/page.jsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/[locale]/auth/login/page.jsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAwS,GACrU,sEACA","debugId":null}},
    {"offset": {"line": 382, "column": 0}, "map": {"version":3,"sources":["file://D%3A/code/fengshui/src/app/%5Blocale%5D/auth/login/page.jsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/[locale]/auth/login/page.jsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/[locale]/auth/login/page.jsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoR,GACjT,kDACA","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}