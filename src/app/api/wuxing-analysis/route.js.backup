import { NextRequest, NextResponse } from "next/server";
import getWuxingData from "../../../lib/nayin.js";

export async function POST(request) {
	// Add request ID for better tracking in concurrent scenarios
	const requestId = Math.random().toString(36).substring(2, 15);

	try {
		const body = await request.json();
		const { userInfo } = body;

		if (!userInfo) {
			return NextResponse.json(
				{ error: "Missing user information" },
				{ status: 400 }
			);
		}

		// Use the proper wuxing calculation from nayin.js
		const calculateTenGodsElements = (userInfo) => {
			if (!userInfo?.birthDateTime) return {};

			// Get proper wuxing data using our existing calculation
			const wuxingData = getWuxingData(
				userInfo.birthDateTime,
				userInfo.gender
			);

			// Get day stem (日干) - this is the foundation for 十神 calculations
			const dayStem = wuxingData.dayStem;
			const dayStemElement = wuxingData.dayStemWuxing;

			// Element mapping for 十神 relationships based on 五行生克
			const elementCycle = ["木", "火", "土", "金", "水"];
			const currentIndex = elementCycle.indexOf(dayStemElement);

			// Calculate proper elements for each 十神
			const tenGodsElements = {
				正印: elementCycle[(currentIndex + 4) % 5], // 生我者為印 (Previous in cycle: 水生木)
				財星: elementCycle[(currentIndex + 2) % 5], // 我克者為財 (Two ahead in cycle: 木克土)
				官殺: elementCycle[(currentIndex + 3) % 5], // 克我者為官殺 (Three ahead: 金克木)
				劫比: dayStemElement, // 同我者為比劫 (Same element)
				食傷: elementCycle[(currentIndex + 1) % 5], // 我生者為食傷 (Next in cycle: 木生火)
			};

			return {
				dayStem,
				dayStemElement,
				tenGodsElements,
				wuxingData, // Return full wuxing data for reference
			};
		};

		const calculationResult = calculateTenGodsElements(userInfo);
		const { tenGodsElements, wuxingData } = calculationResult;

		// Debug: Check if API key exists
		if (!process.env.API_KEY) {
			console.error(
				`[${requestId}] API_KEY environment variable is not set`
			);
			return NextResponse.json(
				{ error: "API configuration error" },
				{ status: 500 }
			);
		}

		// Prepare the prompt for AI analysis with proper birth info
		const prompt = `
請根據以下用戶完整八字信息，為十神格局與內在關聯提供深度分析。用戶信息：
- 性別: ${userInfo.gender}
- 出生年月日: ${userInfo.year || new Date(userInfo.birthDateTime).getFullYear()}年${userInfo.month || new Date(userInfo.birthDateTime).getMonth() + 1}月${userInfo.day || new Date(userInfo.birthDateTime).getDate()}日
- 出生時間: ${userInfo.hour || new Date(userInfo.birthDateTime).getHours()}時

完整八字信息：
- 年柱: ${wuxingData.year} (${wuxingData.yearStem}${wuxingData.yearBranch})
- 月柱: ${wuxingData.month} (${wuxingData.monthStem}${wuxingData.monthBranch})  
- 日柱: ${wuxingData.day} (${wuxingData.dayStem}${wuxingData.dayBranch}) - 日主：${calculationResult.dayStem}${calculationResult.dayStemElement}
- 時柱: ${wuxingData.hour} (${wuxingData.hourStem}${wuxingData.hourBranch})

十神元素對應：
- 正印: ${tenGodsElements.正印}
- 財星: ${tenGodsElements.財星} 
- 官殺: ${tenGodsElements.官殺}
- 劫比: ${tenGodsElements.劫比}
- 食傷: ${tenGodsElements.食傷}

**重要：請嚴格按照以下JSON格式返回，確保所有字符串值都用雙引號包圍，避免在字符串中使用未轉義的引號。**

請為每個十神類別提供深度心理分析，特別是在**核心矛盾**方面要非常詳細和具體。同時，請根據此用戶的完整命理分析，提供三個個人化的**化解提示**建議。

## 核心矛盾分析要求（必須嚴格遵守）：
1. **每個十神類別必須包含exactly 3個核心矛盾**
2. **深度心理層面**：分析內在價值觀衝突、情感需求矛盾
3. **生活實踐層面**：具體的行為模式衝突、選擇困境
4. **發展演進層面**：成長過程中的階段性矛盾
5. **關係動力層面**：人際關係中的互動矛盾
6. **每個衝突至少150-200字的深度描述**

## 化解提示要求（必須嚴格遵守）：
1. **必須提供exactly 3個個人化建議**
2. **針對性指導**：基於用戶的十神配置和五行特質提供具體建議
3. **實用性**：每個建議都要有明確的執行方法和生活應用
4. **個人化**：避免泛泛而談，要針對此特定命理配置
5. **每個建議包含標題、詳細內容(100-150字)、實例(60-80字)**

**注意：這是強制要求，每個類別必須返回完整的3個conflicts，不可省略！每個十神的coreConflicts.conflicts數組必須包含3個對象！同時必須包含3個化解提示建議！**

{
  "tenGodsAnalysis": {
    "正印": {
      "name": "正印",
      "element": "${tenGodsElements.正印}",
      "meaning": "主學業、貴人、長輩緣",
      "expression": "基於日主與正印關係的詳細個性化描述（100-150字）",
      "realManifestation": ["具體表現1（50字以上）", "具體表現2（50字以上）"],
      "warnings": {
        "title": "潛在挑戰",
        "items": ["挑戰1（30字以上）", "挑戰2（30字以上）"]
      },
      "coreConflicts": {
        "title": "核心矛盾深度解析",
        "conflicts": [
          {
            "title": "依賴vs獨立（或其他心理矛盾標題）",
            "color": "red",
            "description": "深入分析這個矛盾的心理機制、形成原因、內在動力，以及如何在日常生活中體現。包括情感需求、價值觀衝突、行為模式等多個層面的詳細描述（150-200字）",
            "example": "具體的生活場景例子，說明這個矛盾如何在實際情況中展現，包括內心掙扎和外在表現（80-100字）",
            "psychologicalRoots": "這個矛盾的深層心理根源，與童年經歷、原生家庭、社會環境的關聯（60-80字）",
            "developmentalStages": "在不同人生階段（青年、中年、老年）這個矛盾會如何演變（60-80字）"
          },
          {
            "title": "第二個深層心理矛盾標題",
            "color": "purple",
            "description": "詳細心理分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展階段分析（60-80字）"
          },
          {
            "title": "第三個深層心理矛盾標題",
            "color": "green",
            "description": "詳細心理分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展階段分析（60-80字）"
          }
        ]
      }
    },
        "conflicts": [
          {
            "title": "衝突1標題",
            "color": "red",
            "description": "衝突描述",
            "example": "具體例子"
          },
          {
            "title": "衝突2標題",
            "color": "purple",
            "description": "衝突描述",
            "example": "具體例子"
          },
          {
            "title": "衝突3標題",
            "color": "green",
            "description": "衝突描述",
            "example": "具體例子"
          }
        ]
      }
    },
    "財星": {
      "name": "財星",
      "element": "${tenGodsElements.財星}",
      "meaning": "主財富、物質、配偶",
      "expression": "基於日主與財星關係的詳細個性化描述（100-150字）",
      "realManifestation": ["具體表現1（50字以上）", "具體表現2（50字以上）"],
      "warnings": {
        "title": "潛在挑戰",
        "items": ["挑戰1（30字以上）", "挑戰2（30字以上）"]
      },
      "coreConflicts": {
        "title": "核心矛盾深度解析",
        "conflicts": [
          {
            "title": "物質vs精神（或其他心理矛盾標題）",
            "color": "red",
            "description": "深入分析財富、物質與精神追求之間的內在衝突（150-200字）",
            "example": "具體的生活場景例子（80-100字）",
            "psychologicalRoots": "心理根源分析（60-80字）",
            "developmentalStages": "發展階段演變（60-80字）"
          },
          {
            "title": "第二個財星相關矛盾",
            "color": "purple", 
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          },
          {
            "title": "第三個財星相關矛盾",
            "color": "green",
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          }
        ]
      }
    },
    "官殺": {
      "name": "官殺",
      "element": "${tenGodsElements.官殺}",
      "meaning": "主事業、權威、責任",
      "expression": "基於日主與官殺關係的詳細個性化描述（100-150字）",
      "realManifestation": ["具體表現1（50字以上）", "具體表現2（50字以上）"],
      "warnings": {
        "title": "潛在挑戰",
        "items": ["挑戰1（30字以上）", "挑戰2（30字以上）"]
      },
      "coreConflicts": {
        "title": "核心矛盾深度解析",
        "conflicts": [
          {
            "title": "權威vs自由（或其他心理矛盾標題）",
            "color": "red",
            "description": "深入分析權威、責任與個人自由之間的複雜矛盾（150-200字）",
            "example": "具體的生活場景例子（80-100字）",
            "psychologicalRoots": "心理根源分析（60-80字）",
            "developmentalStages": "發展階段演變（60-80字）"
          },
          {
            "title": "第二個官殺相關矛盾",
            "color": "purple",
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          },
          {
            "title": "第三個官殺相關矛盾",
            "color": "green",
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          }
        ]
      }
    },
    "劫比": {
      "name": "劫比",
      "element": "${tenGodsElements.劫比}",
      "meaning": "主朋友、競爭、協作",
      "expression": "基於日主與劫比關係的詳細個性化描述（100-150字）",
      "realManifestation": ["具體表現1（50字以上）", "具體表現2（50字以上）"],
      "warnings": {
        "title": "潛在挑戰", 
        "items": ["挑戰1（30字以上）", "挑戰2（30字以上）"]
      },
      "coreConflicts": {
        "title": "核心矛盾深度解析",
        "conflicts": [
          {
            "title": "合作vs競爭（或其他心理矛盾標題）",
            "color": "red",
            "description": "深入分析合作與競爭、個人與團體之間的內在衝突（150-200字）",
            "example": "具體的生活場景例子（80-100字）",
            "psychologicalRoots": "心理根源分析（60-80字）",
            "developmentalStages": "發展階段演變（60-80字）"
          },
          {
            "title": "第二個劫比相關矛盾",
            "color": "purple",
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          },
          {
            "title": "第三個劫比相關矛盾",
            "color": "green",
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          }
        ]
      }
    },
    "食傷": {
      "name": "食傷",
      "element": "${tenGodsElements.食傷}",
      "meaning": "主創意、表達、子女",
      "expression": "基於日主與食傷關係的詳細個性化描述（100-150字）",
      "realManifestation": ["具體表現1（50字以上）", "具體表現2（50字以上）"],
      "warnings": {
        "title": "潛在挑戰",
        "items": ["挑戰1（30字以上）", "挑戰2（30字以上）"]
      },
      "coreConflicts": {
        "title": "核心矛盾深度解析", 
        "conflicts": [
          {
            "title": "創意vs現實（或其他心理矛盾標題）",
            "color": "red",
            "description": "深入分析創意表達與現實限制之間的複雜矛盾（150-200字）",
            "example": "具體的生活場景例子（80-100字）",
            "psychologicalRoots": "心理根源分析（60-80字）",
            "developmentalStages": "發展階段演變（60-80字）"
          },
          {
            "title": "第二個食傷相關矛盾",
            "color": "purple",
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          },
          {
            "title": "第三個食傷相關矛盾",
            "color": "green",
            "description": "詳細分析（150-200字）",
            "example": "生活實例（80-100字）",
            "psychologicalRoots": "心理根源（60-80字）",
            "developmentalStages": "發展演變（60-80字）"
          }
        ]
      }
    }
  },
  "lifeAdvice": {
    "tips": [
      {
        "title": "第一個建議標題",
        "content": "詳細的建議內容，針對用戶的十神格局提供個人化的實用指導（100-150字）",
        "example": "具體的生活應用例子，說明如何在實際情況中運用這個建議（60-80字）"
      },
      {
        "title": "第二個建議標題", 
        "content": "詳細的建議內容，針對用戶的命理特質提供個人化的實用指導（100-150字）",
        "example": "具體的生活應用例子，說明如何在實際情況中運用這個建議（60-80字）"
      },
      {
        "title": "第三個建議標題",
        "content": "詳細的建議內容，針對用戶的五行配置提供個人化的實用指導（100-150字）",
        "example": "具體的生活應用例子，說明如何在實際情況中運用這個建議（60-80字）"
      }
    ]
  }
}

請確保：
1. 返回有效的JSON格式，不要包含markdown代碼塊標記
2. 所有字符串值使用雙引號
3. 避免在字符串內容中使用未轉義的雙引號  
4. **核心矛盾分析要非常深入**，包含心理學角度的深度分析
5. 每個矛盾都要基於真實的命理邏輯和心理學原理
6. 內容要個人化、具體化，避免泛泛而談
7. **重要：每個十神類別的coreConflicts.conflicts數組必須包含exactly 3個conflict對象，這是強制要求！**
8. **不可省略任何一個conflict，必須完整生成所有15個conflicts（5個類別 × 3個conflicts）**
9. **化解提示必須包含exactly 3個建議，每個建議都要基於用戶的具體命理配置提供針對性指導**
10. **化解提示的內容要實用、具體、可執行，避免空洞的建議**
`;

		// Make request to DeepSeek API with timeout for better concurrency
		const controller = new AbortController();
		const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 second timeout

		const response = await fetch(
			"https://api.deepseek.com/v1/chat/completions",
			{
				method: "POST",
				headers: {
					"Content-Type": "application/json",
					Authorization: `Bearer ${process.env.API_KEY}`,
				},
				body: JSON.stringify({
					model: "deepseek-chat",
					messages: [
						{
							role: "system",
							content:
								"你是一位專業的命理分析師，精通八字命理和十神分析。請根據用戶的八字信息提供深度、個人化的分析。重要：你必須返回有效的JSON格式，不要包含任何markdown標記或額外文本。所有字符串值必須用雙引號包圍，確保JSON格式完全正確。每個十神類別的coreConflicts.conflicts數組必須包含exactly 3個conflict對象，這是強制要求。",
						},
						{
							role: "user",
							content: prompt,
						},
					],
					temperature: 0.7,
					max_tokens: 8000,
					response_format: { type: "json_object" },
				}),
				signal: controller.signal,
			}
		);

		clearTimeout(timeoutId);

		if (!response.ok) {
			const errorText = await response.text();
			console.error(
				`[${requestId}] DeepSeek API Error:`,
				response.status,
				response.statusText,
				errorText
			);
			return NextResponse.json(
				{ error: "Failed to get AI analysis", details: errorText },
				{ status: 500 }
			);
		}

		const data = await response.json();
		let analysisContent = data.choices?.[0]?.message?.content;

		if (!analysisContent) {
			console.error(
				`[${requestId}] No content received from DeepSeek API`
			);
			return NextResponse.json(
				{ error: "No analysis content received" },
				{ status: 500 }
			);
		}

		// Clean the response to extract JSON
		analysisContent = analysisContent.trim();

		// Remove markdown code block markers if present
		if (analysisContent.startsWith("```json")) {
			analysisContent = analysisContent
				.replace(/^```json\s*/, "")
				.replace(/\s*```$/, "");
		} else if (analysisContent.startsWith("```")) {
			analysisContent = analysisContent
				.replace(/^```\s*/, "")
				.replace(/\s*```$/, "");
		}

		// Comprehensive JSON repair function
		const repairJson = (jsonStr) => {
			try {
				// First, try basic cleaning
				let repaired = cleanJsonContent(jsonStr);

				// Test if it works
				JSON.parse(repaired);
				return repaired;
			} catch (error) {
				// More comprehensive repair
				let repaired = jsonStr
					// Remove markdown code blocks
					.replace(/```json\s*/g, "")
					.replace(/```\s*$/g, "")
					// Fix property names without quotes
					.replace(
						/([{,]\s*)([a-zA-Z_\u4e00-\u9fff]+)(\s*):/g,
						'$1"$2"$3:'
					)
					// Fix string values with unescaped quotes
					.replace(
						/(:\s*")([^"]*)"([^",}\]]*)/g,
						(match, prefix, content, suffix) => {
							// Only fix if suffix doesn't start with comma, brace, or bracket
							if (!suffix.match(/^[\s,}\]]/)) {
								return `${prefix}${content}\\"${suffix}`;
							}
							return match;
						}
					)
					// Remove trailing commas
					.replace(/,(\s*[}\]])/g, "$1")
					// Fix spacing
					.replace(/"\s*:\s*/g, '": ')
					.replace(/,\s*/g, ", ")
					// Remove extra whitespace
					.replace(/\s+/g, " ")
					.trim();

				// Final validation
				try {
					JSON.parse(repaired);
					return repaired;
				} catch (finalError) {
					throw finalError;
				}
			}
		};

		// Clean and fix common JSON issues before parsing
		const cleanJsonContent = (content) => {
			let cleaned = content
				// Remove any trailing commas before closing braces/brackets
				.replace(/,(\s*[}\]])/g, "$1")
				// Remove any non-printable characters
				.replace(/[\x00-\x1F\x7F]/g, "")
				// Fix common quote issues - replace single quotes with double quotes in property names
				.replace(/'([^']*)'(\s*):/g, '"$1"$2:')
				// Fix missing quotes around property names
				.replace(/([{,]\s*)([a-zA-Z_$][a-zA-Z0-9_$]*)\s*:/g, '$1"$2":')
				// Remove any trailing commas at end of objects
				.replace(/,\s*}/g, "}")
				.replace(/,\s*]/g, "]")
				// Fix spacing around colons
				.replace(/"\s*:\s*/g, '": ')
				.trim();

			// Additional validation - ensure all property names are properly quoted
			try {
				// Quick test parse to see if it's valid JSON
				JSON.parse(cleaned);
				return cleaned;
			} catch (testError) {
				// More aggressive fixes for common issues
				cleaned = cleaned
					// Fix unescaped quotes in string values
					.replace(
						/(:\s*")([^"]*)"([^"]*)"([^",}\]]*")/g,
						'$1$2\\"$3\\"$4'
					)
					// Ensure property names are quoted
					.replace(/([{,]\s*)([a-zA-Z_中文]+)(\s*):/g, '$1"$2"$3:')
					// Fix any remaining single quotes in strings
					.replace(/'/g, "'");

				return cleaned;
			}
		};

		// Validate JSON structure
		const isValidJsonStructure = (content) => {
			const openBraces = (content.match(/\{/g) || []).length;
			const closeBraces = (content.match(/\}/g) || []).length;
			const openBrackets = (content.match(/\[/g) || []).length;
			const closeBrackets = (content.match(/\]/g) || []).length;

			return openBraces === closeBraces && openBrackets === closeBrackets;
		};

		// Try to parse the JSON with improved error handling
		let analysis;
		try {
			analysis = JSON.parse(analysisContent);
		} catch (parseError) {
			// Try comprehensive repair
			try {
				const repairedJson = repairJson(analysisContent);
				analysis = JSON.parse(repairedJson);
			} catch (repairError) {
				// More sophisticated fallback: Try to extract and fix JSON
				try {
					// Find the main JSON object
					const jsonStart = analysisContent.indexOf("{");
					const jsonEnd = analysisContent.lastIndexOf("}") + 1;

					if (jsonStart !== -1 && jsonEnd > jsonStart) {
						let extractedJson = analysisContent.substring(
							jsonStart,
							jsonEnd
						);

						// Use comprehensive repair on extracted content
						const repairedExtracted = repairJson(extractedJson);
						analysis = JSON.parse(repairedExtracted);
					} else {
						throw new Error("No valid JSON structure found");
					}
				} catch (secondParseError) {
					// Ultimate fallback: Return structured error with partial content
					return NextResponse.json(
						{
							error: "Failed to parse AI response after multiple repair attempts",
							analysis: generateFallbackAnalysis(tenGodsElements),
							aiGenerated: false,
							contentType: "fallback-data",
						},
						{ status: 200 } // Return success with fallback data
					);
				}
			}
		}

		// Validate the analysis structure
		if (!analysis.tenGodsAnalysis) {
			console.error(
				`[${requestId}] Invalid analysis structure:`,
				analysis
			);
			return NextResponse.json(
				{ error: "Invalid analysis structure received from AI" },
				{ status: 500 }
			);
		}

		// Ensure all required ten gods are present
		const requiredTenGods = ["正印", "財星", "官殺", "劫比", "食傷"];
		for (const godName of requiredTenGods) {
			if (!analysis.tenGodsAnalysis[godName]) {
				console.error(
					`[${requestId}] Missing ten god analysis: ${godName}`
				);
				// Provide fallback structure with correct element
				analysis.tenGodsAnalysis[godName] = {
					name: godName,
					element: tenGodsElements[godName],
					meaning: getTenGodMeaning(godName),
					expression: `${godName}${tenGodsElements[godName]}在此命格中的具體表現正在分析中...`,
					realManifestation: [
						"正在分析具體表現...",
						"請稍候獲取個人化分析...",
					],
					warnings: {
						title: `${godName}的潛在挑戰...`,
						items: ["分析中...", "請稍候..."],
					},
					coreConflicts: {
						title: `${godName}的核心矛盾`,
						conflicts: [
							{
								title: "分析中",
								color: "red",
								description: "正在分析核心衝突...",
								example: "具體例子分析中...",
							},
							{
								title: "分析中",
								color: "purple",
								description: "正在分析核心衝突...",
								example: "具體例子分析中...",
							},
							{
								title: "分析中",
								color: "green",
								description: "正在分析核心衝突...",
								example: "具體例子分析中...",
							},
						],
					},
				};
			}
		}

		return NextResponse.json({
			success: true,
			analysis: analysis,
			aiGenerated: true,
			contentType: "ai-generated",
			timestamp: new Date().toISOString(),
			requestId: requestId,
		});
	} catch (error) {
		console.error(
			`[${requestId || "unknown"}] Wuxing Analysis API Error:`,
			error
		);
		return NextResponse.json(
			{ error: "Internal server error", details: error.message },
			{ status: 500 }
		);
	}
}

// Helper function to generate fallback analysis when JSON parsing fails
function generateFallbackAnalysis(tenGodsElements) {
	const createBasicGodAnalysis = (godName, element) => ({
		name: godName,
		element: element,
		meaning: getTenGodMeaning(godName),
		expression: `${godName}(${element})在您的命格中展現獨特特質，正在為您進行深度分析...`,
		realManifestation: ["正在分析具體表現...", "個人化分析準備中..."],
		warnings: {
			title: `${godName}需要注意的方面`,
			items: ["分析中...", "請稍候..."],
		},
		coreConflicts: {
			title: `${godName}的核心議題`,
			conflicts: [
				{
					title: "平衡挑戰",
					color: "red",
					description: "正在分析內在平衡狀況...",
					example: "具體分析準備中...",
				},
				{
					title: "發展機會",
					color: "purple",
					description: "正在識別成長契機...",
					example: "個人化建議準備中...",
				},
				{
					title: "整合智慧",
					color: "green",
					description: "正在整合命理洞察...",
					example: "深度分析即將完成...",
				},
			],
		},
	});

	return {
		tenGodsAnalysis: {
			正印: createBasicGodAnalysis("正印", tenGodsElements.正印),
			財星: createBasicGodAnalysis("財星", tenGodsElements.財星),
			官殺: createBasicGodAnalysis("官殺", tenGodsElements.官殺),
			劫比: createBasicGodAnalysis("劫比", tenGodsElements.劫比),
			食傷: createBasicGodAnalysis("食傷", tenGodsElements.食傷),
		},
		// Remove lifeAdvice from fallback - let it show loading instead
		// lifeAdvice: null, // This will trigger loading state in UI
	};
}

// Helper function to get basic ten god meanings
function getTenGodMeaning(godName) {
	const meanings = {
		正印: "主學業、貴人、長輩緣",
		財星: "主財富、物質、配偶",
		官殺: "主事業、權威、責任",
		劫比: "主朋友、競爭、協作",
		食傷: "主創意、表達、子女",
	};
	return meanings[godName] || "主要特質";
}
